require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe UserProfilesController, type: :controller do

  login_account

  let(:valid_for_creation) do
    {
      name: 'testing profile',
      sex: 'm',
      birthday: '2019-05-28',
      phone: '81123456789',
      description: 'testing account'
    }
  end

  let(:invalid_attributes) do
    {
      name: '',
      sex: 'f',
      birthday: '2019-05-28',
      phone: '81123456789',
      description: 'testing account'
    }
  end

  let(:valid_session) { }

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      user_profile = FactoryBot.create(:user_profile)
      get :show, params: {id: user_profile.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      user_profile = FactoryBot.create(:user_profile)
      allow(controller).to receive(:profile_owner).and_return(@account)
      get :edit, params: {id: user_profile.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new UserProfile" do
        allow(controller).to receive(:profile_owner).and_return(@account)
        expect {
          post :create, params: { user_profile: valid_for_creation  },
          session: valid_session
        }.to change(UserProfile, :count).by(1)
      end

      it "redirects to the created user_profile" do
        allow(controller).to receive(:profile_owner).and_return(@account)
        post :create, params: {user_profile: valid_for_creation},
        session: valid_session
        expect(response).to redirect_to(UserProfile.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {user_profile: invalid_attributes},
        session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        {
          name: "new_test_user",
          sex: 'm',
          birthday: '01-02-1990',
          phone: '00987654321',
          description: 'brand new description'
        }
      end

      it "updates the requested user_profile" do
        allow(controller).to receive(:profile_owner).and_return(@account)
        user_profile = FactoryBot.create(:user_profile)
        put :update, params: {id: user_profile.to_param,
          user_profile: new_attributes}, session: valid_session
        user_profile.reload
        expect(user_profile.name).to eq(new_attributes[:name])
      end

      it "redirects to the user_profile" do
        allow(controller).to receive(:profile_owner).and_return(@account)
        user_profile = FactoryBot.create(:user_profile)
        put :update, params: { id: user_profile.to_param,
          user_profile: user_profile.attributes }, session: valid_session
        expect(response).to redirect_to(user_profile)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'edit' template)" do
        allow(controller).to receive(:profile_owner).and_return(@account)
        user_profile = FactoryBot.create(:user_profile)
        put :update, params: {id: user_profile.to_param,
          user_profile: invalid_attributes}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user_profile" do
      allow(controller).to receive(:profile_owner).and_return(@account)
      user_profile = FactoryBot.create(:user_profile)
      expect {
        delete :destroy, params: {id: user_profile.to_param}, session: valid_session
      }.to change(UserProfile, :count).by(-1)
    end

    it "redirects to the user_profiles list" do
      user_profile = FactoryBot.create(:user_profile)
      delete :destroy, params: {id: user_profile.to_param}, session: valid_session
      expect(response).to redirect_to(user_profiles_url)
    end
  end

end
